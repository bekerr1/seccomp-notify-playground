---
- hosts: all
  become: yes
  vars:
    k8s_version: "1.32.4"
    containerd_version: "2.0.0"
    runc_version: "1.1.11"
    crictl_version: "v1.26.0"
    calico_version: "v3.29.3"
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install prerequisites
      apt:
        name: "{{ packages }}"
        state: present
      vars:
        packages:
          - curl
          - gnupg
          - apt-transport-https
          - ca-certificates
          - jq

    - name: Disable swap
      command: swapoff -a
      changed_when: false

    - name: Remove swap from fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^.*swap.*$'
        state: absent

    - name: Load kernel modules
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/containerd.conf

    - name: Apply kernel modules
      command: "{{ item }}"
      with_items:
        - modprobe overlay
        - modprobe br_netfilter

    - name: Configure sysctl
      copy:
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
          net.bridge.bridge-nf-call-ip6tables = 1
        dest: /etc/sysctl.d/99-kubernetes-cri.conf

    - name: Add host-gateway to /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "10.0.2.2 host-gateway"
        state: present
        backup: yes
    - name: Add local-registry to /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "10.0.2.2 local-registry"
        state: present
        backup: yes

    - name: Apply sysctl
      command: sysctl --system

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present

    - name: Download containerd
      get_url:
        url: https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-amd64.tar.gz
        dest: /tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz

    - name: Extract containerd
      unarchive:
        src: /tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz
        dest: /usr/local
        remote_src: yes

    - name: Install containerd service
      get_url:
        url: https://raw.githubusercontent.com/containerd/containerd/v{{ containerd_version }}/containerd.service
        dest: /etc/systemd/system/containerd.service
        mode: '0644'

    - name: Create /etc/containerd directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Copy config.toml from /shared to /etc/containerd
      copy:
        src: /shared/containerd-config.toml
        dest: /etc/containerd/config.toml
        mode: '0644'
        backup: yes

    - name: Enable and start containerd
      systemd:
        name: containerd
        enabled: yes
        state: started

    - name: Set containerd socket permissions
      file:
        path: /var/run/containerd/containerd.sock
        mode: '0666'

    - name: Install runc
      get_url:
        url: https://github.com/opencontainers/runc/releases/download/v{{ runc_version }}/runc.amd64
        dest: /usr/local/sbin/runc
        mode: '0755'

    - name: Install crictl
      unarchive:
        src: https://github.com/kubernetes-sigs/cri-tools/releases/download/{{ crictl_version }}/crictl-{{ crictl_version }}-linux-amd64.tar.gz
        dest: /usr/local/bin/
        remote_src: yes

    - name: Configure crictl runtime endpoint
      copy:
        content: |
          runtime-endpoint: unix:///var/run/containerd/containerd.sock
        dest: /etc/crictl.yaml
        mode: '0644'

    - name: Add Kubernetes GPG key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
        state: present

    - name: Add Kubernetes repository
      apt_repository:
        repo: deb https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /
        state: present

    - name: Install Kubernetes components
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet={{ k8s_version }}-1.1
          - kubeadm={{ k8s_version }}-1.1
          - kubectl={{ k8s_version }}-1.1

    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Control plane node configuration
      when: node_role == "control-plane"
      block:
        # I tried for ages to get a VB setup without the default network 
        # being the NAT gateway but was unsuccessful. So im going with 
        # this private network model but the kubelet must be configured to 
        # use the private IP instead of the default. Unfortunate :(
        - name: Write kubeadm init config with custom node IP
          copy:
            dest: "{{ init_file }}"
            content: |
              apiVersion: kubeadm.k8s.io/v1beta4
              kind: InitConfiguration
              localAPIEndpoint:
                advertiseAddress: "{{ apiserver_advertise_address }}"
                bindPort: 6443
              nodeRegistration:
                criSocket: unix:///var/run/containerd/containerd.sock
                kubeletExtraArgs:
                - name: node-ip
                  value: "{{ node_ip }}"
              ---
              apiVersion: kubeadm.k8s.io/v1beta4
              kind: ClusterConfiguration
              kubernetesVersion: "{{ k8s_version }}"
              controlPlaneEndpoint: "{{ apiserver_advertise_address }}:6443"
              networking:
                podSubnet: "192.168.0.0/16"

        - name: Initialize control plane
          command: kubeadm init --config "{{ init_file }}"
          register: kubeadm_init
          failed_when: kubeadm_init.rc != 0 and "already exists" not in kubeadm_init.stderr

        - name: Set up kubeconfig
          block:
            - name: Create .kube directory
              file:
                path: /root/.kube
                state: directory
            - name: Copy admin.conf
              copy:
                src: /etc/kubernetes/admin.conf
                dest: /root/.kube/config
                remote_src: yes
            - name: Set ownership
              file:
                path: /root/.kube/config
                owner: root
                group: root
            - name: Copy admin.conf to private
              copy:
                src: /etc/kubernetes/admin.conf
                dest: /private/config
                remote_src: yes
            - name: Create vagrant dir
              file:
                path: /home/vagrant/.kube
                state: directory
            - name: Copy admin.conf to vagrant
              copy:
                src: /etc/kubernetes/admin.conf
                dest: /home/vagrant/.kube/config
                remote_src: yes
            - name: Set ownership
              file:
                path: /home/vagrant/.kube/config
                owner: vagrant
                group: vagrant

        - name: Install Tigera Calico operator
          ansible.builtin.shell: |
            kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/{{ calico_version }}/manifests/tigera-operator.yaml || true
          become_user: "{{ ansible_user }}"
          changed_when: true
        - name: Download Calico custom resources
          ansible.builtin.get_url:
            url: "https://raw.githubusercontent.com/projectcalico/calico/{{ calico_version }}/manifests/custom-resources.yaml"
            dest: /tmp/custom-resources.yaml
            mode: "0644"
        - name: Apply Calico custom resources
          ansible.builtin.shell: |
            kubectl create -f /tmp/custom-resources.yaml || true
          become_user: "{{ ansible_user }}"
          changed_when: true
        - name: Remove control-plane taint (for single-node clusters)
          ansible.builtin.shell: |
            kubectl taint nodes --all node-role.kubernetes.io/control-plane- || true
          become_user: "{{ ansible_user }}"
          changed_when: false

        - name: Wait for Calico node pods to exist
          ansible.builtin.shell: |
            kubectl get po -l k8s-app=calico-node -n calico-system -ojson | jq -r '.items | length'
          become_user: "{{ ansible_user }}"
          changed_when: false
          register: calico_pods
          until: calico_pods.stdout | int > 0
          retries: 15
          delay: 2
        - name: Verify Calico pods
          ansible.builtin.shell: |
            kubectl wait po -lk8s-app=calico-node -ncalico-system --for condition=Ready --timeout=360s
          become_user: "{{ ansible_user }}"

        - name: Copy join command to private directory
          shell: |
            rm "{{ join_file_template }}" || true
            token=$(kubeadm token generate)
            kubeadm token create $token --ttl=2h
            ca_cert_hash=$(openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //')

            cat <<EOF > "{{ join_file_template }}"
            apiVersion: kubeadm.k8s.io/v1beta4
            kind: JoinConfiguration
            caCertPath: /etc/kubernetes/pki/ca.crt
            discovery:
              bootstrapToken:
                token: "$token"
                apiServerEndpoint: "{{ apiserver_advertise_address }}:6443"
                caCertHashes:
                - "sha256:$ca_cert_hash"
            nodeRegistration:
              criSocket: unix:///var/run/containerd/containerd.sock
              kubeletExtraArgs:
              - name: node-ip
                value: NODE_IP
            timeouts:
              controlPlaneComponentHealthCheck: 4m0s
              discovery: 5m0s
              etcdAPICall: 2m0s
              kubeletHealthCheck: 4m0s
              kubernetesAPICall: 1m0s
              tlsBootstrap: 5m0s
              upgradeManifests: 5m0s

          args:
            creates: "{{ join_file_template }}"


    - name: Worker node configuration
      when: node_role == "worker"
      block:
        - name: Run join-command.sh
          when: node_role == "worker"
          ansible.builtin.shell: |
            sed 's/NODE_IP/{{ node_ip }}/g' "{{ join_file_template }}" > "{{ node_join_file }}"
            kubeadm join --config "{{ node_join_file }}"
          changed_when: true

    - name: Ensure the seccomp directory exists
      file:
        path: /var/lib/kubelet/seccomp
        state: directory
        mode: '0755'
    - name: Write kubelet seccomp config
      copy:
        dest: /var/lib/kubelet/seccomp/notify.json
        content: |
          {
            "defaultAction": "SCMP_ACT_ALLOW",
            "listenerPath": "/run/seccomp-agent.socket",
            "syscalls": [
              {
                "names": ["mkdir"],
                "action": "SCMP_ACT_NOTIFY"
              }
            ]
          }

    - name: Restart kubelet
      systemd:
        name: kubelet
        state: restarted
        enabled: yes
        daemon_reload: yes
